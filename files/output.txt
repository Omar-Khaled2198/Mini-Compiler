<INT>: int
<ID>: x
<SEMICOLON>: ;
<INT>: int
<ID>: y
<LEFT_ROUND_B>: (
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<IF>: if
<LEFT_ROUND_B>: (
<ID>: x
<EQUAL>: ==
<INTEGRAL_LITERAL>: 5
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<INT>: int
<ID>: x
<SEMICOLON>: ;
<ID>: x
<ASSIGNMENT>: =
<INTEGRAL_LITERAL>: 10
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
<WHILE>: while
<LEFT_ROUND_B>: (
<BOOL_LITERAL>: true
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<INT>: int
<ID>: omar
<SEMICOLON>: ;
<IF>: if
<LEFT_ROUND_B>: (
<ID>: omar
<EQUAL>: ==
<INTEGRAL_LITERAL>: 5
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<STRING>: String
<ID>: bird
<SEMICOLON>: ;
<ID>: bird
<ASSIGNMENT>: =
<STRING_LITERAL>: "omar"
<SEMICOLON>: ;
<IF>: if
<LEFT_ROUND_B>: (
<ID>: bird
<EQUAL>: ==
<STRING_LITERAL>: "omar"
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<ID>: omar
<LEFT_SQUARE_B>: [
<ID>: n
<RIGHT_SQUARE_B>: ]
<ASSIGNMENT>: =
<CHAT_LITERAL>: 'a'
<SEMICOLON>: ;
<RETURN>: return
<STRING_LITERAL>: "fuck"
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
<ELSE>: else
<LEFT_CURLY_B>: {
<RETURN>: return
<STRING_LITERAL>: "fuck2"
<SEMICOLON>: ;
<BREAK>: break
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
<RIGHT_CURLY_B>: }
<RIGHT_CURLY_B>: }
<RIGHT_CURLY_B>: }
<INT>: int
<ID>: l
<LEFT_ROUND_B>: (
<INT>: int
<ID>: x
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<RETURN>: return
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
