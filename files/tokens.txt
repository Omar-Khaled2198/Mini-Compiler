<INT>: int
<ID>: computefac
<LEFT_ROUND_B>: (
<INT>: int
<ID>: num
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<INT>: int
<ID>: factorial
<SEMICOLON>: ;
<ID>: factorial
<ASSIGNMENT>: =
<INTEGRAL_LITERAL>: 1
<SEMICOLON>: ;
<IF>: if
<LEFT_ROUND_B>: (
<ID>: num
<LESSTHAN>: <
<INTEGRAL_LITERAL>: 0
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<RETURN>: return
<ID>: factorial
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
<ELSE>: else
<LEFT_CURLY_B>: {
<INT>: int
<ID>: i
<SEMICOLON>: ;
<ID>: i
<ASSIGNMENT>: =
<INTEGRAL_LITERAL>: 0
<SEMICOLON>: ;
<WHILE>: while
<LEFT_ROUND_B>: (
<ID>: i
<LESSTHAN>: <
<ID>: num
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<ID>: factorial
<ASSIGNMENT>: =
<ID>: factorial
<MULTIPLY>: *
<ID>: i
<SEMICOLON>: ;
<SINGLE_COMMENT>: //factorial *=i
<ID>: i
<ASSIGNMENT>: =
<ID>: i
<PLUS>: +
<INTEGRAL_LITERAL>: 1
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
<RIGHT_CURLY_B>: }
<RETURN>: return
<ID>: factorial
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
