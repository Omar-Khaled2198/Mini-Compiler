<INT>: int
<ID>: main
<LEFT_ROUND_B>: (
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<INT>: int
<ID>: val
<SEMICOLON>: ;
<ID>: val
<ASSIGNMENT>: =
<INTEGRAL_LITERAL>: 3
<PLUS>: +
<INTEGRAL_LITERAL>: 5
<MULTIPLY>: *
<INTEGRAL_LITERAL>: 7
<SEMICOLON>: ;
<INT>: int
<ID>: m
<SEMICOLON>: ;
<ID>: m
<ASSIGNMENT>: =
<INTEGRAL_LITERAL>: 3
<SEMICOLON>: ;
<STRING>: String
<ID>: text
<SEMICOLON>: ;
<ID>: text
<ASSIGNMENT>: =
<STRING_LITERAL>: "int x+1"
<SEMICOLON>: ;
<WHILE>: while
<LEFT_ROUND_B>: (
<ID>: val
<LESSTHAN>: <
<INTEGRAL_LITERAL>: 3
<AND>: &&
<ID>: m
<GREATERTHAN>: >
<INTEGRAL_LITERAL>: 0
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<INT>: int
<ID>: x
<SEMICOLON>: ;
<INT>: int
<ID>: y
<SEMICOLON>: ;
<INT>: int
<ID>: z
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
<MULTI_COMMENT>: /* this is a null
        line commoent */
<SINGLE_COMMENT>: // single line comment
<STRING>: String
<ID>: x
<SEMICOLON>: ;
<ID>: x
<ASSIGNMENT>: =
<STRING_LITERAL>: "/*hello"
<SEMICOLON>: ;
<FLOAT>: float
<ID>: x
<SEMICOLON>: ;
<ID>: x
<ASSIGNMENT>: =
<FlOAT_LITERAL>: 3.5
<SEMICOLON>: ;
<RIGHT_CURLY_B>: }
